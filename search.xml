<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo常见buff</title>
      <link href="/2023/05/25/eleven/"/>
      <url>/2023/05/25/eleven/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述：</strong><br>在<code>hexo d</code>时报错，出现如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">*** Please tell me <span class="built_in">who</span> you are.</span><br><span class="line"></span><br><span class="line">Run</span><br><span class="line"></span><br><span class="line">  git config --global user.email <span class="string">&quot;you@example.com&quot;</span></span><br><span class="line">  git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line"></span><br><span class="line">to <span class="built_in">set</span> your account<span class="string">&#x27;s default identity.</span></span><br><span class="line"><span class="string">Omit --global to set the identity only in this repository.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fatal: unable to auto-detect email address (got &#x27;</span>Administrator@TAOTAO.(none)<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">FATAL &#123;</span></span><br><span class="line"><span class="string">  err: Error: Spawn failed</span></span><br><span class="line"><span class="string">      at ChildProcess.&lt;anonymous&gt; (D:\hexo\read\node_modules\hexo-util\lib\spawn.js:51:21)</span></span><br><span class="line"><span class="string">      at ChildProcess.emit (events.js:314:20)</span></span><br><span class="line"><span class="string">      at ChildProcess.cp.emit (D:\hexo\read\node_modules\cross-spawn\lib\enoent.js:34:29)</span></span><br><span class="line"><span class="string">      at Process.ChildProcess._handle.onexit (internal/child_process.js:276:12) &#123;</span></span><br><span class="line"><span class="string">    code: 128</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125; Something&#x27;</span>s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解决方法：<br>参考网上的解决方法就是找到.deploy_git中的隐藏文件.git(显示隐藏文件的方法自行百度)，再找到.git目录中的config文件，在最后边加上三行(其实其他地方也存在.git文件，如果不确定就把全部.git后面都加上下面三行)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">email=your email </span><br><span class="line">name=your name</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遇到buff莫慌</title>
      <link href="/2023/05/24/ten/"/>
      <url>/2023/05/24/ten/</url>
      
        <content type="html"><![CDATA[<p>最近hexo一直遇到buff，怎么调试都没用哦个，网上搜索了一大堆解决办法，发现没一个有用的，仔细回想，发现本地网页生成没有任何问题，那么问题出现在远程仓库上，自己傻傻的不停敲代码，然后报错，然后百度搜索，然后更改，然后又报错，又更改…感觉陷入死循环，但是方法不止一个，干嘛非要一条道呢？</p><p>既然本地没有问题，源文件也在本地，那么直接把远程仓库重新删除重新来过，重新部署一遍不就行了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">1. git init  </span><br><span class="line">// 进行初始仓库</span><br><span class="line">// 在git-demo目录中 初始化了一个空的git仓库</span><br><span class="line">// .git文件夹默认是隐藏的 可以通过查看 点击影藏项目 查看文件</span><br><span class="line">2. git add . </span><br><span class="line">// 将文件提交到暂存区，很多人知道这个命令这么敲，但是不知到是什么意思</span><br><span class="line">// 一个文件如果暂存区中没有 那么说明git还没有管理这个文件</span><br><span class="line">// 而这里的 git add . 是将文件中的所有文件进行提交</span><br><span class="line">// 如果是单个文件就将 . (点) 替换为文件名</span><br><span class="line">3. git status</span><br><span class="line">// 查看仓库状态</span><br><span class="line">// No commits yet 当前仓库中还没有任何提交</span><br><span class="line">// nothing to commit working tree clean 目前还没有任何文件可提交 工作目录是干净的</span><br><span class="line">// Untracked files: 未跟踪文件列表(没有被git管理的文件列表)</span><br><span class="line">// 查看仓库状态的时候 git默认会忽略空目录 如果想让git管理空目录 需要在空目录中建立占位文件 约定的名字为.gitkeep</span><br><span class="line">4. git commit -m 提交注释</span><br><span class="line">// 将暂存区中的代码提交到代码仓库</span><br><span class="line">// 这里的注释不用加引号，当然也可以写中文</span><br><span class="line"></span><br><span class="line">// * 如果你是在第一次使用git的时候 需要配置用户信息 否则git不允许提交代码到仓库中 *</span><br><span class="line">//     接下来配置用户信息</span><br><span class="line">5.git config --global user.name 用户名</span><br><span class="line">  git config --global user.email 邮箱</span><br><span class="line">// 上面这两步一步都不能少，可以进行单独输入，这里的用户名就是你注册的时候你的用户名，邮箱也是，可前往别写错了，如果记不住，就写在一个备忘录中，  因为我就踩过这个坑</span><br><span class="line">//  --global 全局配置 当前配置完成以后 做其他项目的时候就不需要再次配置了</span><br><span class="line">6. git config --list 查看git配置信息</span><br><span class="line">// 用户信息实际上是被配置在了.gitconfig文件中, 文件在用户目录下面</span><br><span class="line">// C:\Users\humisel\.ssh 也就是这个路径了</span><br><span class="line">7. git log</span><br><span class="line">// 查看提交的历史记录</span><br><span class="line">// 在这里面可以查看你一共提交了几次，每一次的注释以及时间，因为在大公司中，每个都会被公司冯导一个git账号出现了什么问题是要追究个人的</span><br><span class="line">8.  文件名字 .gitignore</span><br><span class="line">// 为项目添加忽略清单文件</span><br><span class="line">// 可以在忽略清单文件中指定哪些文件不需要被管理 那么指定的文件就不会出现在未跟踪列表中，也不会进行git上传</span><br><span class="line">9. git checkout 文件列表</span><br><span class="line">// 用暂存区中的文件覆盖工作目录中的文件，如果你刚才写的代码有问题，不想要了，但是又撤回不回去，此时就用到了这个命令</span><br><span class="line">10. git rm --cached 文件列表</span><br><span class="line">// 将文件从暂存区中删除，其实是有这个命令，但是呢用不到，也不要去尝试，应为iye不知到自己写的代码什么时候就会出现问题，以便回滚代码</span><br><span class="line">11. git reset --hard commitID</span><br><span class="line">// 这一步就是将代码进行回滚，将仓库中某一次提交的代码覆盖工作目录和暂存区，不明白没关系，最后我会附上一张图进行解释</span><br><span class="line">12. 分支</span><br><span class="line">// 1. 什么叫分支?  分支就是对当前代码的一份拷贝    当前代码 =&gt; 文件 + 提交历史</span><br><span class="line">// 2. 创建分支      git branch 分支名称 =&gt; 创建分支     git branch =&gt; 查看分支</span><br><span class="line">// 在大公司有的时候徐娅创建分支，因为你不能直接在主分支上面修改， 主分支不是给你用的，当然如果你是自己使用git，那就无所谓了</span><br><span class="line">13. git checkout 分支名称 =&gt; 切换分支</span><br><span class="line">// 创建分支后切换分支</span><br><span class="line">//  * 注意：在当前分支开发完成以后一定要提交代码 否则不允许切换分支 *</span><br><span class="line">14. git merge 分支名称</span><br><span class="line">// 合并分支，他会将子分支合并到主分支上</span><br><span class="line">15. git branch -d 删除分支</span><br><span class="line">// 合并玩的分支就没有用了  此时就需要将其删掉</span><br><span class="line">// 默认情况下 git不允许删除一个未合并的分支</span><br><span class="line">// 强制删除未合并的分支使用 git branch -D 分支名称  注意： 这里的 D 是大写的</span><br><span class="line">16. * 注意 *</span><br><span class="line">// 在主分支还没有任何提交的时候 是不能创建其他分支的</span><br></pre></td></tr></table></figure><p>以上操作都是在本地进行操作，接下来就要进行上传代码了， 不管是哪一步出错了，先不要管，这是基本步骤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 首先你得先创建一个git仓库 </span><br><span class="line">// 接下进行操作</span><br><span class="line">1. git push 远程仓库地址 本地分支名称:远程分支名称  // master:master =&gt; master</span><br><span class="line">    </span><br><span class="line">    对。就是这一步，出错了，</span><br><span class="line">    git@github.com: Permission denied (publickey). fatal: Could not read from re...</span><br><span class="line">    Please make sure you have the correct access rights and the repository exists....</span><br><span class="line">    他会报这么一个错，什么意思呢 ?</span><br><span class="line">    请确保您拥有正确的访问权限和存储库存在。</span><br><span class="line">这就很是尴尬，我哪知道是啥意思啊</span><br><span class="line">    于是当时的我就开始各种百度，但是无济于事，各种 csdn 都是一个模子的，复制粘贴，于是我决定自己搞</span><br><span class="line">    先往下看</span><br><span class="line">2. git remote add 别名 别名对应的地址</span><br><span class="line">    // 为远程仓库地址添加别名 就是为了更方便的使用</span><br><span class="line">    // 这里的仓库地址 github 上面提供了两个，一个是https 还有一个是 ssh 咱们使用 https </span><br><span class="line">3. git push origin master</span><br><span class="line">    // 将代码进行提交 ， 这里的   * origin * 就是你创建的别名，你如果用的不是这个别名，就将你写的别名填写到这里</span><br><span class="line">    // 这里也是我踩过的一个坑，当时我那知道这是别名啊，哈哈</span><br><span class="line">4. git push -u origin master </span><br><span class="line">    // 使命令行记住提交地址与分支名称，后面就不需要写前面写的了，一行命令直接搞定</span><br><span class="line">5. git push</span><br><span class="line">    // 这就是我所说的一行命令直接搞定，</span><br><span class="line">    // 当你修改了代码的时候，这个命令就ok</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>知识的诅咒</title>
      <link href="/2023/05/24/nine/"/>
      <url>/2023/05/24/nine/</url>
      
        <content type="html"><![CDATA[<p>作为一个真外行，靠一己之力搭建好博客，其中艰难不言而喻，这也是第一次切实地感受到了<strong>知识的诅咒</strong>。<br><img src="https://img2.baidu.com/it/u=3455539149,2144715540&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=281"><br>看着网上的文档、介绍以及教程,有时陷入苦恼，恨不得打死这群’教师’。也许作为程序员的他们会觉得自己写的东西，发的帖子，录的视频，已经把事情讲得清清楚楚、明明白白，可作为外行人的小白，真是苦不堪言。<br>那些他们觉得简单的，不需要讲的，随意跳过的东西，对于小白就是大坑，每一个坑都需要耗掉小白大半天的时间，但其实对于发布者来讲，只需在发布文章或视频时随意提醒一两句就能帮助外行人避免入坑，可这群贴主、播主完全无视’知识的诅咒’,结果教者和学者都遭受到了知识的诅咒……</p><p><strong>知识诅咒，即我们知道了某种知识，就很难想像不知道它的时候，是什么样？也无法想象不掌握这种知识的状态；同时，与他人分享这种知识变得困难，当别人向自己学习这种知识时，或教别人从事自己熟练的工作时，我们无法站在对方的心态进行讲授，从而形成冲突，并浪费了大量精力，甚至我们无法接受对方并没有听进去多少的现实。</strong></p><p>我们仿佛被知识诅咒了。比如数学老师的咆哮：这么简单的题一看就知道答案了，你还让我怎么教？<br><img src="https://img1.baidu.com/it/u=1311237675,778506192&fm=253&fmt=auto&app=120&f=JPEG?w=1280&h=800"></p><p>再比如，教师给学生讲课的时候，老师觉得显而易见的知识，于是跳过，可是作为学生的你还是一头雾水。</p><p>技术大牛给同事做技术分享时，总是不经意提到”负载均衡””分布式部署””扩容”……这些名词，可能技术大牛认为大家都懂，可事实上作为实习生的你此时一脸懵逼。</p><p>当你学会开车后，就很难再想象自己当初学开车时错误百出的情景。对于此时的你，你会认为开车是一件很容易的事情，你很难想象当初为什么自己会笨手笨脚，错误百出，你会疑惑这么简单的事情当时为什么学的那么难？</p><p>哈佛大学教育学家马祖尔认为，对某事了解得越多，把它教授给其他人的难度就越大。从心理学上来说，知识诅咒是因为我们认为这个很容易，地球人都知道。为什么会这样的呢？因为我们对我们自己已经掌握、熟悉、理解的东西会在价值观假设上做出错误的估计。————这个和’达克效应’有点类似。</p><p>换言之，知识的诅咒算是一种认知偏差，我们总是下意识地假设同我们交流的人拥有理解我们所说事情所需要的背景知识。对知识诅咒的描述也可以是：<strong>如果我们很熟悉某个事物，那么我们很难想象，在不了解这个事物的人眼中，这人、这事会是什么样子。</strong></p><p>每个人的知识都存在局限性，决定了每个人都会受到知识的诅咒。每个人的成长经历、接受的教育、所处的生存环境、接触到的信息不同，塑造了不同的性格、价值观、道德观、社会观、世界观，由此导致每个人对事物的感知、判断和理解不同。正如乡下的小孩对高楼大厦充满惊奇，而大城市中的小孩却不足为奇；相反，大城市中的小孩到乡下分不清麦子和水稻，而乡村中的小孩却能轻易辨别……<br><img src="https://img1.baidu.com/it/u=1141410590,73982626&fm=253&fmt=auto&app=138&f=JPEG?w=890&h=500"></p><p><strong>如何打破知识的诅咒？</strong></p><p>1.时刻提醒自己，自己懂的知识不一定别人就懂，你的常识可能不是别人的常识。也许我们习以为常的东西，别人压根就没接触过，更何谈懂？</p><p>2.理解是建立在已有的知识基础之上，试着找到理解所需的背景知识，也即共识。</p><p>3.唤醒脑中已有的记忆，多运用已知的知识。人们总想精确无比的表达一切，但实际上应该先告诉对方够用的信息，然后再一点一点慢慢增多。</p><p>认识是一个渐进的过程，一次性告诉对方大量不知道的信息等同于没说。我们的沟通应该是你来我往，循序渐进的过程。</p><p>4.多扩充知识领域，多维度思考。<br>隔行如隔山，一个行业或领域待久了，思维容易固化，形成单极思维，思维不可避免产生局限。<br>知识体系越丰富，思维越灵活，掌握的知识越多，受到知识的诅咒越小。</p><p>学习是一个终身的过程，知识的累积需要时间的付出，时间积累带来的知识壁垒是难以逾越的。</p><p>学习与不学习的人在每天看来是没有区别的，在每个月看区别也是微乎其微，在每年看区别似乎还不明显。但在每五年来看时，可能已经是财富的巨大分野，而等到十年再看的时候，也许已经是一种人生对另一种人生不可企及的鸿沟。</p><p>如果你已经错过了从前，那是否愿意从现在开始把握呢？</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hugo主题meme</title>
      <link href="/2023/05/22/eight/"/>
      <url>/2023/05/22/eight/</url>
      
        <content type="html"><![CDATA[<h4 id="hugo与hexo之异同"><a href="#hugo与hexo之异同" class="headerlink" title="hugo与hexo之异同"></a>hugo与hexo之异同</h4><p>Hexo 是一个博客框架，Hugo 是一个网站框架。<br>hugo和hexo中mk语法还是有些不同的，比方front matter用来配置文章的标题、时间、链接、分类等元信息，提供模板调用。hugo中的写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: &quot;post title&quot;</span><br><span class="line">date: &quot;2023-08-20&#x27;</span><br><span class="line">tags: [&quot;tag1&quot;,&quot;tag2&quot;,&quot;tag3&quot;]</span><br><span class="line">categories: [&quot;cat1&quot;, &quot;cat2&quot;]</span><br><span class="line">weight: 20</span><br></pre></td></tr></table></figure><p>Hugo 是一个基于 Go 语言开发的静态网站生成器（SSG），目前由 @bep 领衔开发，Hugo 的突出特点是简洁、灵活、高效，目前有很多知名网站都在使用 Hugo：Netlify、Let’s Encrypt、IPFS、Cloudflare Developers、DigitalOcean Docs、1Password 等等。与目前国内流行的 Hexo 相比，Hugo 的速度可称为飞速——在安装和使用上都是如此。</p><blockquote><p>~&#x2F;blog $ tree -L 1<br>.                     # 说明             Hexo<br>├── archetypes&#x2F;     # 文章模板          scaffolds&#x2F;<br>├── assets&#x2F;         # Hugo 管道<br>├── config.toml     # 配置文件          _config.yml<br>├── content&#x2F;        # 文章目录          source&#x2F;_posts&#x2F;<br>├── data&#x2F;           # Hugo 数据文件     source&#x2F;_data&#x2F;<br>├── layouts&#x2F;        # 布局模板<br>├── public&#x2F;         # 生成的静态文件     public&#x2F;<br>├── resources&#x2F;      # Hugo 缓存<br>├── static&#x2F;         # 网站的静态文件     source&#x2F;<br>└── themes&#x2F;         # 主题目录          themes&#x2F;</p></blockquote><p>对于文章摘要的截取，即「阅读更多」上方的内容。在 Hexo 中你可以在文章中加入<br><code>&lt;!-- more --&gt;</code>来控制，但这在 Hugo 中是不会生效的，在 Hugo 中你必须将空格删除，即 <code>&lt;!--more--&gt;</code><br>还有一个是 【index.md】 的问题，在 Hugo 中你必须在它的前面添加一个下划线，即 【_index.md】。比如：你想自定义标签页面的标题为中文，那么你先在新建一个 【content&#x2F;tags&#x2F;_index.md】 文件，然后在文件中加入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title = &quot;标签&quot;</span><br></pre></td></tr></table></figure><p><strong>在 Hexo 中，你每对文章进行一次修改，你就必须要在浏览器中手动刷新一下页面，如此才能看到最新的渲染结果🐶。但在 Hugo 中，只要有相关变化，Hugo 就会自动为你刷新页面。也就是说，你可以即时预览😎！顺便安利一个有用的技巧，在配置文件上方添加 newContentEditor &#x3D; “gedit”（修改 gedit 为你喜欢的编辑器名），就可以在每次 hugo new 新建文章后自动打开你喜欢的文本编辑器！</strong></p><hr><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>1.<a href="https://io-oi.me/tech/documentation-of-hugo-theme-meme/">Hugo 主题 MemE 文档</a><br>2.<a href="https://io-oi.me/tech/hugo-vs-hexo/#fnref:8">Hugo 与 Hexo 的异同</a><br>3.<a href="https://mantyke.icu/posts/2021/hugo-build-blog/">Hugo | 一起动手搭建个人博客吧</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何用hugo+github搭建博客</title>
      <link href="/2023/05/21/seven/"/>
      <url>/2023/05/21/seven/</url>
      
        <content type="html"><![CDATA[<p>本文逻辑：<br><strong>一、软件下载</strong><br><strong>二、配置环境变量</strong><br><strong>三、创建博客文件</strong><br>    1、创建站点文件夹<br>    2、下载主题<br>    3、新建博客<br><strong>四、将博客部署到github上</strong></p><hr><h2 id="一、软件下载"><a href="#一、软件下载" class="headerlink" title="一、软件下载"></a>一、软件下载</h2><p>hugo和hexo类似，都是博客生成框架，hugo的优势是博客生成较快，而且安装比较简单，软件下载即安装成功。<br>本人电脑win7，所以首先下载对应版本的hugo。<br>hugo下载<a href="https://gohugo.io/">HUGO</a></p><h2 id="二、配置环境变量"><a href="#二、配置环境变量" class="headerlink" title="二、配置环境变量"></a>二、配置环境变量</h2><p>hugo安装完毕后在【hugo.exe】文件夹中，新建bin文件夹，将【hugo.exe】放入bin文件夹中。<br>然后设置环境变量：</p><blockquote><p><strong>控制面板-&gt;系统及安全性-&gt;系统-&gt;系统设定-&gt;环境变量path e:\hugo\bin(如果不添加path每次运行的时候要指定hugo的行对路径类似..\bin\hugo</strong>，<em>这里个人把hugo下载在e盘中</em>)。</p></blockquote><p>设置完成后，【win+r】输入cmd打开命令行，在命令行输入hugo version；git version分别查看环境变量是否添加成功，若打印版本号即配置成功，提示error则失败</p><h2 id="三、创建博客文件"><a href="#三、创建博客文件" class="headerlink" title="三、创建博客文件"></a>三、创建博客文件</h2><h4 id="1、创建站点文件夹"><a href="#1、创建站点文件夹" class="headerlink" title="1、创建站点文件夹"></a>1、创建站点文件夹</h4><p>跳转到下载hugo的文件夹下，在windows命令行中用磁盘名冒号跳转到对应磁盘，进入文件夹用cd命令<br>比方，我的hugo文件夹在f盘就输入命令 f： 再输入cd 文件夹名称进入目录。<br>然后输入以下代码，生成站点文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo new site myblog  #site后就是博客站点的名字，可以自己取</span><br></pre></td></tr></table></figure><p>这样目录中就生成初始站点，站点目录</p><blockquote><p>archetypes&#x2F;<br>content&#x2F;<br>layouts&#x2F;<br>static&#x2F;<br>config.toml</p></blockquote><h4 id="2、下载主题"><a href="#2、下载主题" class="headerlink" title="2、下载主题"></a>2、下载主题</h4><p>由于hugo对新手不是很友好，所以安装包中没有任何主题，必须自己先下载好主题，主题可以在官网下载。<a href="https://themes.gohugo.io/">themes</a>.<br>选择喜欢的主题下载,点击Download跳转到该主题的github页面,点击clone or download.<br>比方,在命令行中克隆</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/darshanbaral/meme.git</span><br></pre></td></tr></table></figure><p><strong>主题下载完成后可以打开themes文件夹-&gt;进入主题文件-&gt;打开exampleSite文件夹-&gt;复制<br>exampleSite文件夹下的所有文件-&gt;返回myblog文件夹粘贴并替换相应文件</strong>(通常跟着主题的文档有相应说明，跟着文章走就行)————【config.toml】是网页的配置文件，可根据需要进行配置，相关操作可参考主题下载页面下的文档</p><p>然后，返回上一级目录，本地启动博客，在命令行中输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo server</span><br></pre></td></tr></table></figure><p>之后会有一个’<a href="http://localhost:1313/',%E6%9C%AC%E5%9C%B0%E5%8D%9A%E5%AE%A2%E7%BD%91%E9%A1%B5%E5%B0%B1%E5%81%9A%E5%A5%BD%E4%BA%86%E3%80%82">http://localhost:1313/&#39;,本地博客网页就做好了。</a></p><h4 id="3、新建博客"><a href="#3、新建博客" class="headerlink" title="3、新建博客"></a>3、新建博客</h4><p>打开git bash或cmd，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo new post\firstblog.md</span><br></pre></td></tr></table></figure><p>返回终端，在新建博客站点的位置中【content&#x2F;post&#x2F;firstblog.md】可看到我们刚创建的博客，我们可以用vscode打开【firstblog.md】并写下自己的第一篇博客。之后输入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo serever</span><br></pre></td></tr></table></figure><p>即可本地网页预览自己刚写下的博客</p><h2 id="四、将博客部署到github上"><a href="#四、将博客部署到github上" class="headerlink" title="四、将博客部署到github上"></a>四、将博客部署到github上</h2><p>在你的github页面点击’new’新建一个存储仓库,仓库名称必须是小写且和github用户名相同.</p><p>命名格式为your_name.github.io ，随后点击create repository即可创建空仓库.</p><p>然后在本地hugo文件夹中输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo</span><br></pre></td></tr></table></figure><p>hugo站点文件夹目录会多出一个public文件夹，这也是我们需要上传到github中的文件，我们在public文件夹中打开git bash，或者cd切换至public文件夹中，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init   #初始化</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin https://github.com/your_name/your_name.github.io.git # 仓库地址</span><br><span class="line">git push -u origin master #初次需要完整输入，后面只需git push</span><br></pre></td></tr></table></figure><p>就此，个人博客就部署成功，可以在浏览器中输入your_name.github.io访问博客，一般github生成较慢，大概等个3-5分钟刷新网页即可。</p><p>以后再次写日志，push就只用输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd public</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;xx&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1.<a href="https://mantyke.icu/posts/2021/hugo-build-blog/">一起动手搭建个人博客吧</a><br>2.<a href="https://www.cnblogs.com/left23333/archive/2022/06/08/16349938.html">利用hugo与github仓库搭建免费博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一台设备如何部署多个github账户</title>
      <link href="/2023/05/21/six/"/>
      <url>/2023/05/21/six/</url>
      
        <content type="html"><![CDATA[<p>如果一台电脑上要使用两个github账号，前提条件是：</p><blockquote><p>1.能够生成两对私钥&#x2F;公钥；<br>2.push时能区分两个账户，推送到相应的仓库；</p></blockquote><h3 id="步骤一：生成两对钥匙"><a href="#步骤一：生成两对钥匙" class="headerlink" title="步骤一：生成两对钥匙"></a>步骤一：生成两对钥匙</h3><p>使用cd ~&#x2F;.ssh切换工作目录，然后使用如下命令生成两个钥匙，中间一路回车</p><ul><li>1、输入并回车：ssh-keygen -t rsa -C”你的第一个github邮箱地址”</li><li>2、输入并回车(这个是私钥的名称，可以随意取)：id_rsa_one</li><li>3、输入密码和再一次确认密码可以为空，回车</li><li>4、在.ssh目录下会出现私钥id_rsd_one和公钥id_rsa_one.pub</li><li>5、打开公钥id_rsa_one.pub，将内容copy到第一个github的SSH keys中</li></ul><p>同理，配置第二个github邮箱地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C&quot;你的第二个github邮箱地址&quot; -f id_rsa_second</span><br></pre></td></tr></table></figure><p>生成名为id_rsa_second的密钥,然后将id_rsa_second.pub的内容copy到第二个github的SSH keys中。</p><blockquote><p>上面ssh-keygen 命令参数：<br>-t: 指定生成rsa 类型秘钥<br>-f: 指定生成秘钥的名字，可以不指定该参数，默认就会生成2个文件：私钥id_rsa，公钥 id_rsa.pub。因此上面的命令需要指定-f，否则生成两次后，私钥跟公钥会覆盖</p></blockquote><h3 id="步骤二：新建config文件"><a href="#步骤二：新建config文件" class="headerlink" title="步骤二：新建config文件"></a>步骤二：新建config文件</h3><p>在.ssh目录下，新建一个config文件，配置内容如下: Host和User名称可以随意取，好辨识就行；HostName为github.com；IdentityFile配置为相应的私钥文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># one                                                                       </span><br><span class="line">Host onegithub</span><br><span class="line">HostName github.com</span><br><span class="line">User one</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_one</span><br><span class="line"></span><br><span class="line">#second                                                                       </span><br><span class="line">Host secondgithub</span><br><span class="line">HostName github.com</span><br><span class="line">User second</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_second</span><br></pre></td></tr></table></figure><blockquote><p>文件说明：<br>Host：是HostName的别名，可以自己取，一般取跟HostName一样的名字。<br>如果遮掩定义：Host mygithub，则在git clone时应如下输入：<br>git clone git@mygithub:PopFisher&#x2F;AndroidRotateAnim.git<br>HostName：配置真正的域名<br>PreferredAuthentications：配置登录时用什么权限认证，如：publickey,password &gt;publickey,keyboard-interactive等<br>User：用户名</p></blockquote><h3 id="步骤三：-绑定私钥"><a href="#步骤三：-绑定私钥" class="headerlink" title="步骤三： 绑定私钥"></a>步骤三： 绑定私钥</h3><p>打开git bash输入如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-agent bash</span><br><span class="line">ssh-add id_rsa_one</span><br><span class="line">ssh-add id_rsa_second</span><br></pre></td></tr></table></figure><p>然后测试一下，是否绑定成功。输入如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@onegithub    #这里对应config中的别名Host</span><br><span class="line">ssh -T git@secondgithub #这里对应config中Host</span><br></pre></td></tr></table></figure><p>如果显示如下一段，表明绑定成功；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi one! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><h3 id="步骤四：配置用户名和邮箱"><a href="#步骤四：配置用户名和邮箱" class="headerlink" title="步骤四：配置用户名和邮箱"></a>步骤四：配置用户名和邮箱</h3><p><strong>注意：因为一台电脑上配置了多个 github 账号，所以就不能再配置全局的用户名和邮箱了，而是在不同的仓库下，如果需要连接不同的 git 账号，配置相应的局部用户名和邮箱即可，如果之前配置过全局的用户名和邮箱，需要取消配置。</strong></p><p>首先清除全局配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 取消全局 用户名/邮箱 配置</span><br><span class="line">git config --global --unset user.name</span><br><span class="line">git config --global --unset user.email</span><br></pre></td></tr></table></figure><p>然后进入不同的仓库文件下，配置相应的name和email</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config user.email &quot;你的第一个github邮箱地址&quot;</span><br><span class="line">git config user.name &quot;one&quot;</span><br><span class="line"></span><br><span class="line">git config user.email &quot;你的第二个github邮箱地址&quot;</span><br><span class="line">git config user.name &quot;second&quot;</span><br></pre></td></tr></table></figure><p>如果需要重建origin,可执行下面操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin //清空原有的</span><br><span class="line">git remote add origin git@one.github.com:one/test.git</span><br></pre></td></tr></table></figure><p>本地新建仓库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 建立本地仓库</span><br><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line"></span><br><span class="line"># push 到 github上去</span><br><span class="line"> git remote add origin git@one.github.com:one/test.git #关联远程仓库</span><br><span class="line"> git push origin master</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1.<a href="https://steflerjiang.github.io/2016/12/16/git%E5%A4%9A%E8%B4%A6%E5%8F%B7%E9%85%8D%E7%BD%AE/">git多账户配置</a><br>2.<a href="https://io-oi.me/tech/ssh-with-multiple-github-accounts/">使用 SSH 连接到 GitHub（多帐号）</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客，git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回顾——反思——探究——提升</title>
      <link href="/2023/05/16/five/"/>
      <url>/2023/05/16/five/</url>
      
        <content type="html"><![CDATA[<p>回顾搭建博客的整个过程，从一无所知到一步步摸索，不停的犯错，不断的遇到问题，最终搭建出属于自己的博客，过程很痛苦，但其间收获了很多东西，学到了很多之前不了解的知识，也许这就是成长吧！——痛并快乐！</p><h2 id="为什么要搭建个人博客？"><a href="#为什么要搭建个人博客？" class="headerlink" title="为什么要搭建个人博客？"></a>为什么要搭建个人博客？</h2><p><strong>首先，是为了更好的学习和成长。</strong>输出是最好的输入，理论的学习可能在逻辑上清晰明了，一时感觉没有什么大的问题，可一旦付出实践，就会错误百出，这就是理论与实践的差别。比方说，自己在搭建这个博客的前期看了很多视频和教程，当时觉得没什么问题，照着一步步做就成，可动起手来就各种问题，每一步进行的都十分艰难。</p><p>通过写博客不光能记录自己学习的过程，还能深化理解和记忆，同时查漏补缺。这是一个主动学习的过程，也是知识建构的过程，更是一个复盘的过程，我们能监控自己的思维，及时的调整与修正思维，将隐性化的思维给显性化——文字就是思维的具体化，那么我们同时也是在训练，提升自己的思维，思维也会随着这个过程变得越来越强大，学习的效率也会越来越高效。</p><p><strong>其次，学习计算机知识，建构思维。</strong>计算机编程是一种思维，或者说计算机语言是一种思维，这个和中文、英文、俄文、日文……是类似的。语言文字是最基本的思维单位，每掌握一种思维就是完善我们大脑思维的过程，大脑思维会变得更具有连贯性和精确性。</p><p>换言之，我们的思维会变得更富有逻辑性，结构性，清晰性，对事物的洞悉、理解、记忆会更加敏锐、透彻。</p><p>个人在学习的过程中，发现学习编程能很好的训练思维，让思维更具有逻辑性、结构性，思维因此也会变得更清晰，或者说思维更加连贯和精确。</p><p>比方说，很多程序员会写博客，记录一些知识与心得，而这些知识与心得通常整理的非常有系统性，大多数的博客中都会有各种思维导图…这些无意识的行为背后无不显示出他们思维的特点——逻辑、结构和清晰，而现实中的行为上表现为无论是工作还是学习上的效率普遍高于常人。</p><p>因此掌握一门编程语言确实是不可或缺的技能，这能大大提高思维能力，而思维是一切能力的基础，提升思维就能从根本上提升其他各种能力，综合性的提高效率。</p><p><strong>第三，建立一个完全由自己掌控的空间，拒绝被利用。</strong>之前一直在简书上写日记，可这两年发现该平台越来越恶心，各种广告，而且关也关不掉，体验感实在太差，一怒之下卸载了app。但写作的习惯不能丢，由于一时找不到合适的平台，于是萌生出搭建一个完全属于自己的博客，当然，自己写作没想过给人看，纯属记录，写给自己看的。</p><hr><h2 id="哪些值得反思及留意到问题？"><a href="#哪些值得反思及留意到问题？" class="headerlink" title="哪些值得反思及留意到问题？"></a>哪些值得反思及留意到问题？</h2><p><strong>第一，一定要多动手，别光想，光看，理论再多还不如直接动手尝试。</strong>在搭建博客的过程中，自己总想把所有的细节搞清楚再动手，于是搜索查找了很多资料，看了很多视频教程，然后就是看的东西越多，掌握的理论越多，越不敢轻易动手，然后就形成一个恶心循环，感觉搭建个人博客好难，最后就是自己被自己唬住了，光看理论，不动手，望而却步。（人总是容易被自己心中放大的恐惧击倒）</p><p>其实，理论再熟悉，真正动起手来就会发现问题，而且很多东西和想的不一样，看的越多，想的越多，越容易把简单的事情搞复杂。而真正动起手来，才发现事情原来很简单，是自己搞复杂了。其次，实践可以帮助我们理解，很多理论上不能理解的东西，一旦动手就能立马理解——原来如此。真的是要动手去尝试，不要怕遇到问题，问题越多，理解就会越深刻，上手就会越快。</p><p>（很多事情不是光靠想就能理解的，有些理解是需要靠实践才能完成的）</p><p><strong>第二、不要拖延，灵感、心得来了要赶紧记下来，不然稍众即逝。</strong>自己这篇反思本应该很早就写下来，无赖拖延到现在。其实在搭建博客的过程中产生了很多想法和心得，当时就觉得这些想法和心得非常的不错，挺深刻，有独到的见解，可一时没有立马记下来，心中盘算着博客建完后再抽空写出来，于是一直拖延到现在，现在回想当初那些灵感和心得，算是忘了一大半，早已不记得原来的模样，只能东拼西凑些内容，勉强算反思吧！——可以说这篇反思并不能令自己满意。</p><p><strong>第三、不要怕遇到问题，要学会分析问题、解决问题，记日记，写博客就是一个发现问题—分析问题—解决问题的过程。</strong>在搭建博客过程中，会遇到过很多问题，说实在，这些问题让人有些畏惧，其间有无数次想放弃，觉得搭建博客好难，但又不甘心，随着问题的一次次解决，发现解决问题并不难，难的是克服那些想要放弃的念头。</p><p><strong>自己总结反思解决问题的几个步奏：</strong></p><blockquote><ul><li>1.遇见问题不要慌，先找报错信息，找到报错信息后，首先要弄懂什么意思，看是自己配置问题还是其它问题</li></ul></blockquote><blockquote><ul><li>2.如果报错的是某个文件第几行的话，大概率是配置问题，就得去提示的文件检查语法</li></ul></blockquote><blockquote><ul><li>3.若不是配置问题再百度，大多数情况下都会有解决教程，然后根据解决方案尝试解决</li></ul></blockquote><blockquote><ul><li>4.若你将报错信息百度，未能百度到答案，这时就要求助大佬或者使用git进行版本回退</li></ul></blockquote><blockquote><ul><li>5.最后终极大法，那就是删除文件重新安装即可</li></ul></blockquote><p>其实遇到问题，最重要的是细心，记住是哪一步开始出现问题，如果实在找不到，大不了把文件删除，重新来过就行，问题本来就是在尝试中解决。</p><p><strong>最后，发现一个挺有趣的现象，在未学会搭建博客之前，这些搭建博客的方法都是知识，一旦学会了搭建博客，这些知识在应用中就变成了一种技能，同时，博客成为一种形式，一种记录内容的形式——用来记录生活中的每一天、每一次的反思。</strong></p><p><strong>形式为内容服务，内容又支撑形式。博客网站是形式，网站上的记录是内容。内容完善形式，形式发展内容。应用知识在于服务于知识，服务于知识在于提高知识的效率，而效率的提升反映在能动的参与改造世界之中。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建博客的那些坑</title>
      <link href="/2023/05/15/four/"/>
      <url>/2023/05/15/four/</url>
      
        <content type="html"><![CDATA[<p>其实这个博客重复搭建了3-4次，最开始用的是Next主题，后来不满意就改用Butterfly。现在回头看，也没想的那么难，很多不理解的东西，现在随着上手和熟练，自然而然就懂了，其中确实碰到很多问题——很多一问三不知的问题，作为小白，开始的尝试和遇到问题确实让人十分头大，但克服之后就柳暗花明，山清水秀……</p><p>不过对于这个网站，还是有不满意的地方，比方访问速度，这也是自己遇到的一个大坑——这个坑浪费了不少时间和精力。</p><p>当时总想着提高网站速度，于是费劲搜索了很多东西，大致浏览了很多文章——看的也不大明白，因为是小白，所以很多东西完全不知所以然——不能理解到底是什么意思，例如：CND，netlify，Vercel，jsDelivr等等。</p><p>想当然的认为就是照着操作一遍就成，访问速度就可提起来了。不过这个过程有得有失，起码开始理解一些东西了。这里记录一下自己的理解，以免以后再次入坑。</p><h2 id="CDN是什么？"><a href="#CDN是什么？" class="headerlink" title="CDN是什么？"></a>CDN是什么？</h2><p>CDN的全称是Content Delivery Network，即内容分发网络。其基本思路是尽可能避开互联网上有可能影响<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E9%80%9F%E5%BA%A6/488203?fromModule=lemma_inlink">数据传输速度</a>和稳定性的瓶颈和环节，使内容传输得更快、更稳定。简单讲，就是给网站提速，让网站的访问速度更快。</p><h2 id="Netlify和Vercel是什么？"><a href="#Netlify和Vercel是什么？" class="headerlink" title="Netlify和Vercel是什么？"></a>Netlify和Vercel是什么？</h2><p>Netlify和vercel是两家云商平台服务商，都提供静态网站托管和CDN服务，这个和Github pages是一样的，支持从 Github, GitLab, Bitbucket 等代码仓库中自动拉取代码 然后进行项目打包和部署等功能，然后生成网页。简单说，它们让你无需摆弄服务器即可将网站放到网络上。</p><p>相对于github的pages 或其他提供静态页面托管的服务，Vercel和Netlify 的访问速度更快。我们博客就是github提供的pages服务。（我们可以把网站部署到它们上面，这样就可以免费享用CDN加速了，访问速度快于github pages。</p><p>这里网上搜索了一些对比。</p><hr><h3 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h3><ul><li><p>速度：尚可，并不很慢，但有时候会抽风。</p></li><li><p>自定义域名：一个。</p></li><li><p>限制：</p></li><li><ul><li><p>单个文件大于50MB将受到警告。</p></li><li><p>单个文件大于100MB无法上传。</p></li><li><p>仓库大小「强烈建议」少于5GB。</p></li><li><p>每小时可构建10次。</p></li><li><p>每月流量100GB。</p></li></ul></li></ul><hr><h3 id="Netlify"><a href="#Netlify" class="headerlink" title="Netlify"></a>Netlify</h3><p><strong>控制台无法访问。</strong></p><ul><li><p>部署方式：GitHub、GitLab、BitBucket仓库自动拉取以及本地CLI直接推送。</p></li><li><p>速度：较GitHub Pages要快，但是稳定性差上不少，部分时候可能直接出现无法访问。</p></li><li><p>自定义域名：多个。</p></li><li><p>限制：<br>对于每个账户：</p></li><li><ul><li>同时只能构建一个站点。</li><li>每月流量100GB。</li><li>每月构建时间300分钟。</li></ul></li></ul><hr><h3 id="Cloudflare-Pages"><a href="#Cloudflare-Pages" class="headerlink" title="Cloudflare Pages"></a>Cloudflare Pages</h3><ul><li><p>部署方式：GitHub仓库。</p></li><li><p>速度：与GitHub Pages相似。</p></li><li><p>自定义域名：最多10个；</p></li><li><p>限制：</p></li><li><ul><li>每月构可构建500次。</li><li>文件数量最多2w个。</li><li>单个文件大小不得超过25MB。</li></ul></li></ul><hr><h3 id="Vercel"><a href="#Vercel" class="headerlink" title="Vercel"></a>Vercel</h3><ul><li><p>部署方式：与Netlify相同，支持GitHub、GitLab、BitBucket仓库自动拉取以及本地CLI直接推送。</p></li><li><p>速度：在所有方案中最快且最稳定。</p></li><li><p>自定义域名：多个。</p></li><li><p>限制：</p></li><li><ul><li>每日可构建100次，但每小时不超过32次。</li><li>单个Git仓库支持连接3个Vercel项目。</li><li>每次构建时长最多45min。每月总计不超过100h。</li><li>每月带宽100次。</li></ul></li></ul><hr><h2 id="什么是jsDelivr？"><a href="#什么是jsDelivr？" class="headerlink" title="什么是jsDelivr？"></a>什么是jsDelivr？</h2><p>jsDelivr是一个免费、开源、不限带宽的CDN公共库，可以提高访问速度。不过访问地址要通过jsDelivr，比方：访问Github仓库，访问地址是：<a href="https://cdn.jsdelivr.net/gh/user.github.io/respo@0.0.2/img%E3%80%82">https://cdn.jsdelivr.net/gh/user.github.io/respo@0.0.2/img。</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主题中播放器的设置（添加及隐藏）</title>
      <link href="/2023/05/13/three/"/>
      <url>/2023/05/13/three/</url>
      
        <content type="html"><![CDATA[<h2 id="如何添加音乐播放器"><a href="#如何添加音乐播放器" class="headerlink" title="如何添加音乐播放器"></a>如何添加音乐播放器</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-aplayer --save</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><strong>第一步：</strong>在站点配置文件【_config.yml】中新增配置项，由於需要全局都插入 aplayer 和 meting 資源，為了防止插入重複的資源，需要把 asset_inject 設為 false<br>在 Hexo 的配置文件中,建议直接加在最底下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><strong>第二步：</strong>在主題的配置文件中找到aplayerInject，enable 設為 true 和 per_page 設為 true</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>第三步：</strong>把 aplayer代碼 插入到主題配置文件的 inject.bottom 去<br>aplayer html 例式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aplayer no-destroy&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;6990698783&quot;</span> <span class="attr">data-server</span>=<span class="string">&quot;netease&quot;</span> <span class="attr">data-type</span>=<span class="string">&quot;playlist&quot;</span> <span class="attr">data-fixed</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-mini</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-listFolded</span>=<span class="string">&quot;false&quot;</span> <span class="attr">data-order</span>=<span class="string">&quot;random&quot;</span> <span class="attr">data-preload</span>=<span class="string">&quot;none&quot;</span> <span class="attr">data-autoplay</span>=<span class="string">&quot;false&quot;</span> <span class="attr">muted</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/05/13/p96FtoD.md.png" alt="p96FtoD.md.png"></p><p>在主题配置文件中找到inject，然后在bottom插入</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class=&quot;aplayer</span> <span class="literal">no</span><span class="string">-destroy&quot;</span> <span class="string">data-id=&quot;6990698783&quot;</span> <span class="string">data-server=&quot;netease&quot;</span> <span class="string">data-type=&quot;playlist&quot;</span> <span class="string">data-fixed=&quot;true&quot;</span> <span class="string">data-mini=&quot;true&quot;</span> <span class="string">data-listFolded=&quot;false&quot;</span> <span class="string">data-order=&quot;random&quot;</span> <span class="string">data-preload=&quot;none&quot;</span> <span class="string">data-autoplay=&quot;false&quot;</span> <span class="string">muted&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>运行 Hexo 就可以看到网页左下角出现了 Aplayer.<br>最后，如果你想切换页面时，音乐不会中断。请把主题配置文件的 pjax 设为 true.</p><hr><h2 id="如何隐藏播放器——靠边隐藏"><a href="#如何隐藏播放器——靠边隐藏" class="headerlink" title="如何隐藏播放器——靠边隐藏"></a>如何隐藏播放器——靠边隐藏</h2><p><strong>第一步：</strong>添加一下 CSS 样式使其自动缩进隐藏。在 【\themes\butterfly\source\css\custom.css】中 添加如下内容(如没有这个文件就新建一个[custom.css]) ：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span><span class="selector-class">.aplayer-narrow</span> <span class="selector-class">.aplayer-body</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">66px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="comment">/* 默认情况下缩进左侧66px，只留一点箭头部分 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span><span class="selector-class">.aplayer-narrow</span> <span class="selector-class">.aplayer-body</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="comment">/* 鼠标悬停是左侧缩进归零，完全显示按钮 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二步：</strong>到主题配置文件引入自定义样式，修改【_config.butterfly.yml】的 inject 配置项：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/custom.css&quot;</span>  <span class="string">media=&quot;defer&quot;</span> <span class="string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span></span><br></pre></td></tr></table></figure><p>最后重新运行hexo,看看左下角播放器是否隐藏了</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何备份博客源文件</title>
      <link href="/2023/05/12/Backup-files/"/>
      <url>/2023/05/12/Backup-files/</url>
      
        <content type="html"><![CDATA[<p>如果电脑中的本地博客文件丢失，或者不小心删除，又或者更换电脑，那我们该怎么办？<br>最好的办法就是备份一份源文件，当然你也可以每次写完博客后把它保存在U盘，虽然这个方法很保险，但不是很方便，毕竟不可能每次都把源文件拷进U盘。</p><p>最优化方案就是把博客源文件备份在远程仓库中，这样就算是更换电脑，或者本地文件丢失，我们也不用慌，可以从远程仓库把这个源文件下载下来，而且每次可以更新完博客之后，输入命令同步上传源文件。</p><p>因为hexo部署到github上的文件不包含源文件。详细的讲，在github仓库中的文件是由’hexo g’首先生成一个public文件————这个好像应该叫静态文件，再然后通过’hexo d’上传到github仓库中，这个时候本地也会有一个【.deploy_git】文件生成————这个就是上传的文件，这个里面的文件和【public】是一样的。<br><img src="https://s1.ax1x.com/2023/05/12/p9ypHMT.png"><br><img src="https://s1.ax1x.com/2023/05/12/p9ypbsU.png"></p><p>我们在进行备份时，并不需要将整个博客目录全部备份，只备份以下几个用户自定义的即可：scaffolds目录，source目录，themes目录，.gitignore文件，_config.yml文件，package.json文件，其他都是通用的。</p><blockquote><p><strong>首先我们先来观察整个博客目录的结构：</strong></p><ol><li>【.deploy_git】 本目录会在我们部署时生成，也就是github上保存的文件，无需备份。</li><li>【node_modules】 本目录包含了hexo博客依赖的模块，安装时自动生成，无需备份。</li><li>【public】 与【.deploy_git】类似，是编译后生成的文件静态网页文件，无需备份。</li><li>【scaffolds】 保存了用户文章的模板，需要备份。</li><li>【source】 保存了用户文章的源文件，需要备份。</li><li>【themes】 保存了用户下载的主题文件与配置，需要备份。</li><li>【.gitignore】 保存了推送到github时忽略的文件名，需要备份。</li><li>【_config.yml】 保存了用户配置信息，需要备份。</li><li>【db.json】 保存了网页的数据文件，在编译生成静态网页时会自动更新，无需备份。</li><li>【package.json】 保存了依赖的模块列表，需要备份。</li><li>【package-lock.json】保存了依赖的模块安装记录，无需备份。</li></ol></blockquote><p><img src="https://s1.ax1x.com/2023/05/12/p9yVJz9.png" alt="p9yVJz9.png"></p><p><strong>那么我们该如何备份呢？</strong></p><blockquote><p><strong>第一步：</strong>登陆Github，在博客的仓库下新建一个分支，名字自己取(我的名叫Mblog)；<br><strong>第二步：</strong>然后在这个仓库中，按setting，将分支设置为defaul（默认）。</p></blockquote><p><img src="https://s1.ax1x.com/2023/05/12/p9yQ2an.png" alt="p9yQ2an.png"><br><img src="https://s1.ax1x.com/2023/05/12/p9yQgVs.png" alt="p9yQgVs.png"></p><p>然后在本地的任意目录下，打开git bash，之后git clone仓库地址（个人是在hexo目录下打开），例如：个人执行的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:xxxxxx/xxxxxxx.github.io.git # 后面地址是仓库的</span><br><span class="line"># 一定要是ssh地址，不然后面的&#x27;git push&#x27;会报错，因为用https后面需要重现登陆github,但github从2021年8月30日之后又不支持用户名登陆，这就有点bug</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/05/12/p9y8of1.png" alt="p9y8of1.png"><br>由于默认分支已经设成了Myblog，所以clone时只clone了Myblog。clone完成后本地会生成一个仓库名的文件。</p><blockquote><p><strong>第三步：</strong>将克隆下来的目录中除了.git文件夹外的所有文件都删掉，如果看不到.git文件夹请打开显示隐藏文件夹<br><img src="https://s1.ax1x.com/2023/05/12/p9y8OmD.md.png" alt="p9y8OmD.md.png"><br><strong>第四步：</strong>把之前我们写的博客源文件全部复制过来，除了.deploy_git。<br>这里应该说一句，复制过来的源文件应该有一个.gitignore，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git：</p></blockquote><p><img src="https://s1.ax1x.com/2023/05/12/p9ylQds.md.png" alt="p9ylQds.md.png"></p><ul><li>注意：如果之前克隆过themes中的主体文件，要将主题文件中的.git目录删除掉，否则无法备份主题文件.因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。<br><img src="https://s1.ax1x.com/2023/05/12/p9ylfwd.png" alt="p9ylfwd.png"></li></ul><blockquote><p><strong>第五步：</strong>在该备份的目录下执行以下命令：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;备份&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>这样你的博客就备份好了，可以在你的Github上看一看是否有这些源文件。其中node_modules、public、db.json已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要重新输入命令安装 。<br><img src="https://s1.ax1x.com/2023/05/12/p9yBZrR.md.png" alt="p9yBZrR.md.png"></p><p>以后每次再更新文章，一定要把源文件上传一下，依次执行命令就行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;xxx&quot;</span><br><span class="line">git push</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="恢复博客"><a href="#恢复博客" class="headerlink" title="恢复博客"></a>恢复博客</h2><p>如果更换设备，那就在新设备上克隆就可以了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 仓库地址</span><br></pre></td></tr></table></figure><p>然后在克隆下来的文件夹中执行命令————即把hexo重新安装一遍</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli</span><br><span class="line">npm install </span><br><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure><p>然后就可以正常使用了，同样要注意：<strong>每次更新完文章，把源文件上传一下</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;&quot;</span><br><span class="line">git push</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>1.<a href="https://www.jianshu.com/p/57b5a384f234">Hexo博客备份</a><br>2.<a href="https://www.cnblogs.com/eidolonw/p/13066869.html">hexo源码上传到GitHub</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何置顶和加入文章封面</title>
      <link href="/2023/05/10/two/"/>
      <url>/2023/05/10/two/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/ab.png"><br>可以直接在文章的front-matter区域里添加 sticky: 1 属性来把这篇文章置顶。数值越大，置顶的优先级越大。<br>同样，在Front-matter添加cover，并填上要显示的图片地址。<br><img src="/images/zd.png"><br>如果不想在首页显示 cover, 可以设置为 false。</p><blockquote><p>文章封面的获取顺序 Front-matter 的 cover &gt; 配置文件的 default_cover &gt; false</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cover:</span><br><span class="line">  # 是否显示文章封面</span><br><span class="line">  index_enable: true</span><br><span class="line">  aside_enable: true</span><br><span class="line">  archives_enable: true</span><br><span class="line">  # 封面显示的位置</span><br><span class="line">  # 三个值可配置 left , right , both</span><br><span class="line">  position: both</span><br><span class="line">  # 当没有设置cover时，默认的封面显示</span><br><span class="line">  default_cover: </span><br></pre></td></tr></table></figure><h2 id="如何网站加载速度优化"><a href="#如何网站加载速度优化" class="headerlink" title="如何网站加载速度优化"></a>如何网站加载速度优化</h2><p><strong>压缩静态资源</strong><br>  静态资源，顾名思义，就是不会变化的资源。当然这个不会变化并不是指这个资源永远不会变，而是在网站更新前不会自己发生变动。最常见的静态资源包括但不限于：HTML文件、多媒体文件（图片、影音……）、字体文件、JS&#x2F;CSS文件……</p><p>  我们先说HTML以及JS&#x2F;CSS文件，这一类由代码构成的文件，在我们进行编写时，为了提高可读性，会插入很多的空格、换行等等字符。这些字符有些看得见有些看不见，其存在与否都不会影响运行结果，但其是确确实实占用着空间的，所以使用工具删掉这些字符就能减小一部分体积。</p><p><strong>方法：</strong><br>  接下来就是说明我是用的压缩方案，我是使用gulp来压缩静态资源。<br>  首先，我们要安装gulp，在博客根目录打开终端，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --global gulp-cli</span><br><span class="line">npm install gulp -g   </span><br><span class="line">npm install gulp --save  </span><br></pre></td></tr></table></figure><p>  接下来，我们要安装gulp插件，小伙伴根据自己需要进行安装即可，不需要全部安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 压缩HTML</span><br><span class="line">npm install gulp-htmlclean --save-dev</span><br><span class="line">npm install gulp-html-minifier-terser --save-dev</span><br><span class="line"></span><br><span class="line"># 压缩CSS</span><br><span class="line">npm install gulp-cssnano --save-dev</span><br><span class="line"></span><br><span class="line"># 压缩JS</span><br><span class="line">npm install gulp-terser --save-dev</span><br><span class="line"></span><br><span class="line"># 压缩TTF</span><br><span class="line">npm install gulp-fontmin --save-dev</span><br><span class="line"></span><br><span class="line"># 压缩图片</span><br><span class="line">npm install --save-dev gulp-imagemin</span><br></pre></td></tr></table></figure><p><img src="/images/abc.png"></p><p><strong>然后在根目录下创建【gulpfile.js】文件，并输入以下内容：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">const gulp = require(&quot;gulp&quot;)</span><br><span class="line">// 用到的各个插件</span><br><span class="line">const htmlMin = require(&#x27;gulp-html-minifier-terser&#x27;)</span><br><span class="line">const htmlClean = require(&#x27;gulp-htmlclean&#x27;)</span><br><span class="line">const terser = require(&#x27;gulp-terser&#x27;)</span><br><span class="line">const cssnano = require(&#x27;gulp-cssnano&#x27;)</span><br><span class="line">const fontmin = require(&#x27;gulp-fontmin&#x27;)</span><br><span class="line"></span><br><span class="line">// 压缩js</span><br><span class="line">// 参数 doc：https://github.com/terser-js/terser#minify-options</span><br><span class="line">gulp.task(&#x27;minify-js&#x27;, () =&gt;</span><br><span class="line">    gulp.src([&#x27;./public/**/*.js&#x27;])</span><br><span class="line">        .pipe(terser(&#123;</span><br><span class="line">            compress: &#123;</span><br><span class="line">                /** @see https://blog.csdn.net/weixin_39842528/article/details/81390588 */</span><br><span class="line">                sequences: 50,</span><br><span class="line">                unsafe: true,</span><br><span class="line">                unsafe_math: true,</span><br><span class="line">                pure_getters: true,</span><br><span class="line">                ecma: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(&#x27;./public&#x27;))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 压缩css</span><br><span class="line">// 参数 doc：https://cssnano.co/docs/what-are-optimisations/</span><br><span class="line">gulp.task(&#x27;minify-css&#x27;, () =&gt;</span><br><span class="line">    gulp.src([&#x27;./public/**/*.css&#x27;])</span><br><span class="line">        .pipe(cssnano(&#123;</span><br><span class="line">            mergeIdents: false,</span><br><span class="line">            reduceIdents: false,</span><br><span class="line">            discardUnused: false</span><br><span class="line">        &#125;)).pipe(gulp.dest(&#x27;./public&#x27;))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 压缩html</span><br><span class="line">// 参数 doc：https://github.com/terser/html-minifier-terser#readme</span><br><span class="line">gulp.task(&#x27;minify-html&#x27;, () =&gt;</span><br><span class="line">    gulp.src(&#x27;./public/**/*.html&#x27;)</span><br><span class="line">        .pipe(htmlClean())</span><br><span class="line">        .pipe(htmlMin(&#123;</span><br><span class="line">            removeComments: true,                   // 清除html注释</span><br><span class="line">            collapseWhitespace: true,               // 合并空格</span><br><span class="line">            collapseBooleanAttributes: true,        // 压缩布尔类型的 attributes</span><br><span class="line">            noNewlinesBeforeTagClose: false,        // 去掉换行符</span><br><span class="line">            removeAttributeQuotes: true,            // 在可能时删除属性值的引号</span><br><span class="line">            removeRedundantAttributes: true,        // 属性值与默认值一样时删除属性</span><br><span class="line">            removeEmptyAttributes: true,            // 删除值为空的属性</span><br><span class="line">            removeScriptTypeAttributes: true,       // 删除 `type=&quot;text/javascript&quot;`</span><br><span class="line">            removeStyleLinkTypeAttributes: true,    // 删除 `type=&quot;text/css&quot;`</span><br><span class="line">            minifyJS: true,                         //压缩页面 JS</span><br><span class="line">            minifyCSS: true,                        //压缩页面 CSS</span><br><span class="line">            minifyURLs: true                        //压缩页面URL</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(&#x27;./public&#x27;))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//压缩字体</span><br><span class="line">function minifyFont(text, cb) &#123;</span><br><span class="line">    gulp</span><br><span class="line">        .src(&#x27;./public/fonts/*.ttf&#x27;) //原字体所在目录</span><br><span class="line">        .pipe(fontmin(&#123;</span><br><span class="line">            text: text</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(&#x27;./public/fontsdest/&#x27;)) //压缩后的输出目录</span><br><span class="line">        .on(&#x27;end&#x27;, cb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gulp.task(&#x27;minify-ttf&#x27;, (cb) =&gt; &#123;</span><br><span class="line">    var buffers = [];</span><br><span class="line">    gulp</span><br><span class="line">        .src([&#x27;./public/**/*.html&#x27;]) //HTML文件所在目录请根据自身情况修改</span><br><span class="line">        .on(&#x27;data&#x27;, function (file) &#123;</span><br><span class="line">            buffers.push(file.contents);</span><br><span class="line">        &#125;)</span><br><span class="line">        .on(&#x27;end&#x27;, function () &#123;</span><br><span class="line">            var text = Buffer.concat(buffers).toString(&#x27;utf-8&#x27;);</span><br><span class="line">            minifyFont(text, cb);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//压缩</span><br><span class="line">gulp.task(&quot;zip&quot;, gulp.parallel(&#x27;minify-js&#x27;, &#x27;minify-css&#x27;, &#x27;minify-html&#x27;, &#x27;minify-ttf&#x27;))</span><br></pre></td></tr></table></figure><p><em>最后配置下命令，在【package.json】找到“scripts”,在其下server添加’&amp;&amp; hexo gulp’</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;hexo generate&quot;,</span><br><span class="line">    &quot;clean&quot;: &quot;hexo clean&quot;,</span><br><span class="line">    &quot;deploy&quot;: &quot;hexo deploy&quot;,</span><br><span class="line">    &quot;server&quot;: &quot;hexo gulp &amp;&amp; hexo server&quot;  # 这里把gulp 添加在前面</span><br></pre></td></tr></table></figure><p><em>每次运行hexo s就会自动执行。</em></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次搭建博客</title>
      <link href="/2023/05/10/first/"/>
      <url>/2023/05/10/first/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-Github搭建博客"><a href="#hexo-Github搭建博客" class="headerlink" title="hexo+Github搭建博客"></a>hexo+Github搭建博客</h1><p>作为一个小白，拒绝被裹挟，受够了各种自媒体平台的限制和恶心广告，于是萌生出搭建属于自己的博客的想法。虽然有些不自量力，但个人相信只要想做，没有什么是做不到的（很多事情不是‘做不做的到’的问题，而是’有没有决心‘的问题！）。</p><p>这个过程很痛苦，走了不少弯路，曾一度想放弃，可又不甘心，在抵触和坚持中终于搭建出自己的博客。</p><p>如果你也想搭建属于自己的博客，最重要是的什么？<strong>勇气+坚持+耐心</strong>，不要害怕遇到问题，问题是成长的基石，每一次的解决都是一次收获之旅。把问题当成一种挑战，一种向上发展的路劲，收获是不言而喻的。<img src="/images/ab.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本人是使用<strong>Hexo+Github</strong>搭建博客，不熟悉这些工具的小白可能还是很懵的。简单说，就是使用<strong>模板</strong>（Hexo）搭建博客页面，生成本地博客，然后上传到<strong>Github</strong>服务器，由<strong>github pages</strong>渲染生成前端页面——网页。</p><h4 id><a href="#" class="headerlink" title></a></h4><h4 id="hexo的介绍"><a href="#hexo的介绍" class="headerlink" title="hexo的介绍"></a>hexo的介绍</h4><p><strong>Hexo</strong>是一款快速、简洁且高效的博客生成框架。它基于Node.js,是搭建博客的首选框架。</p><p>它的优势是依赖少，易于安装和便于使用，可以直接使用Markdown语法撰写博客，然后将生成到网页上传到你的github上，之后别人就可以看到你的网页了。你无需关心网页代码的具体细节，只需专心写好博客的内容就行。</p><p>（因为<strong>Hexo</strong>的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。）</p><p><img src="/images/abc.png"></p><h4 id="github-pages的介绍"><a href="#github-pages的介绍" class="headerlink" title="github pages的介绍"></a>github pages的介绍</h4><p>使用<strong>github pages</strong>搭建博客的好处：</p><ul><li><p>全是静态文件，访问速度快；</p></li><li><p>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</p></li><li><p>可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</p></li><li><p>数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行</p></li><li><p>博客内容可以轻松打包、转移、发布到其它平台。</p></li></ul><hr><blockquote><p>本文逻辑</p><p><strong>第一部分：</strong>环境准备；配置node.js和git环境，安装hexo，生成本地博客页面，下载和安装Vscode+Typora。</p><p><strong>第二部分：</strong>配置信息；注册github，创建仓库，绑定github，部署hexo到github，上传网页，完成搭建。</p><p><strong>第三部分：</strong>优化博客；下载主题，个性化装扮博客，备份博客源文件。</p></blockquote><hr><h2 id="第一部分：环境准备"><a href="#第一部分：环境准备" class="headerlink" title="第一部分：环境准备"></a>第一部分：环境准备</h2><p>搭建博客其实很简单，只需利用<strong>hexo</strong>自动生成博客框架即可，但安装<strong>hexo</strong>前，电脑中必须要有Node.js和Git。因此，如果我们电脑中没有这些程序，首先就是安装Node.js和Git。</p><p>1.下载并安装Node.js；</p><p>2.下载并安装Git；</p><p>3.安装hexo，生成本地博客；</p><h4 id="1-下载并安装Node-js"><a href="#1-下载并安装Node-js" class="headerlink" title="1.下载并安装Node.js"></a>1.下载并安装Node.js</h4><p><strong>Node.js</strong>的官网：<a href="https://nodejs.org/en">https://nodejs.org/en</a></p><ul><li>注意：Node.js版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本，否则后面运行<strong>hexo</strong>可能会遇到问题。</li></ul><p>下载好对应你系统的Node.js版本后，剩下的就是傻瓜式的安装。这里有一点建议：如果你不是C盘战士，建议换个盘安装。</p><p>1.开始安装<br><img src="/images/nodejs1.png"></p><p>2.勾选复选框，点击【Next】按钮</p><p><img src="/images/nodejs2.png"></p><p>3.修改目录，点击【Next】</p><p><img src="/images/nodejs3.png"></p><p><img src="/images/nodejs4.png"></p><p><img src="/images/nodejs5.png"></p><p>4.后点击【Finish】完成安装</p><p><img src="/images/nodejs6.png"></p><p>至此Node.js已经安装完成，可以先进行简单的测试看是否安装成功，后面还需要进行环境配置。</p><p>5.在键盘按下【win+R】键，输入cmd，然后回车，打开cmd窗口</p><p><img src="/images/nodejs7.png"></p><p><img src="/images/nodejs8.png"></p><p>安装完后的目录如下所示：</p><p><img src="/images/nodejs9.png"></p><p><strong>此处说明下</strong>：新版的Node.js已自带npm，安装Node.js时会一起安装，npm的作用就是对Node.js依赖的包进行管理，也可以理解为用来安装&#x2F;卸载Node.js需要装的东西</p><p>6.环境配置：</p><p><strong>注意</strong>：这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install express [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语句时，会将安装的模块安装到【C:\Users\用户名\AppData\Roaming\npm】路径中，占C盘空间。</p><p>例如：我希望将全模块所在路径和缓存路径放在我node.js安装的文件夹中，则在我安装的文件夹【D:\Develop\nodejs】下创建两个文件夹【node_global】及【node_cache】如下图：</p><p><img src="/images/nodejs10.png"></p><p>创建完两个文件夹之后，打开cmd命令窗口，依次输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;D:\Develop\nodejs\node_global&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set cache &quot;D:\Develop\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/nodejs11.png"></p><p>接下来设置环境变量，关闭cmd窗口，“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量”</p><p><img src="/images/nodejs12.png"></p><p>进入环境变量对话框，在【系统变量】下新建【NODE_PATH】，输入【D:\Develop\nodejs\node_global\node_modules】；</p><p>将【用户变量】下的【Path】修改为【D:\Develop\nodejs\node_global】。</p><p><img src="/images/nodejs13.png"></p><p><img src="/images/nodejs14.png"></p><p><img src="/images/nodejs15.png"></p><p><img src="/images/nodejs16.png"><br>配置完成后，安装个module测试下——我们就最常用的express模块进行安装，打开cmd窗口，输入如下命令进行模块的全局安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express -g  # -g是全局安装的意思</span><br></pre></td></tr></table></figure><p><img src="/images/nodejs17.png"></p><p><strong>至此Nodejs安装成功。</strong></p><hr><h4 id="2-下载并安装git"><a href="#2-下载并安装git" class="headerlink" title="2.下载并安装git"></a>2.下载并安装git</h4><ul><li>git的官网：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li></ul><p>由于是国外网站，所以下载很慢，可以点一下链接。</p><ul><li>链接：<a href="https://pan.quark.cn/s/d1f8086f2ac4">https://pan.quark.cn/s/d1f8086f2ac4</a> 提取码：pGQm</li></ul><p>下载完成后，同样是傻瓜式操作，建议不要安装在C盘。不清楚的可以看下面教程：</p><p>（安装教程：<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html%EF%BC%89">https://www.cnblogs.com/xueweisuoyong/p/11914045.html）</a></p><p>安装完成后，鼠标右键可以看到【Git Bash】和【Git GUI】就证明安装好了。</p><p><img src="/images/git_1.png"></p><hr><h4 id="3-安装hexo，生成本地博客"><a href="#3-安装hexo，生成本地博客" class="headerlink" title="3.安装hexo，生成本地博客"></a>3.安装hexo，生成本地博客</h4><p><strong>第一步：</strong>在电脑的某个地方新建一个名为 blog 的文件夹（名字可以随便取）。</p><blockquote><p>例如：我的是【D:\hexo\blog】，这个文件夹将来就作为你存放代码的地方。</p></blockquote><p><strong>第二步：</strong>在 【D:\hexo\blog 】文件夹下右键打开【 Git Bash Here】</p><p><img src="/images/hexo2.png"></p><p><strong>然后窗口输入：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><strong>安装hexo，完成后再输入</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p><strong>验证是否安装成功。</strong></p><p><img src="/images/hexo.png"></p><p><strong>第三步：</strong>初始化本地博客，在刚才的窗口中继续输入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>这时我们的文件夹【D:\hexo\blog】中就多了些文件。</p><p><img src="/images/hexo5.png"></p><p>接着在命令窗口中输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="/images/hexo6.png"></p><p><strong>本地博客页面</strong>就此已生成，我们可以在浏览器中打开【<a href="http://localhost:4000/%E3%80%91%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%88%91%E4%BB%AC%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%95%A6%EF%BC%81">http://localhost:4000/】，就可以看到我们的博客啦！</a></p><p><img src="/images/hexo4.png"></p><p>按【ctrl+c】可关闭本地服务器。</p><p>由于后面涉及到代码的修改及之后需要写博客，所以需要IDE工具。</p><p>常用的Markdown编辑器有：</p><ul><li><strong>Cmd Markdown</strong></li><li><strong>Typora</strong>（1.0版本后收费）</li><li><strong>VScode</strong>（需安装markdown all in one）</li></ul><p>个人使用的是Vscode和Typora。当然你也可以只使用Vscode即可。</p><ul><li>Vscode官网：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li><li>Vscode友情链接： <a href="https://pan.quark.cn/s/f64b7413660c">https://pan.quark.cn/s/f64b7413660c</a> 提取码：7eMQ</li><li>Typora链接：<a href="https://pan.quark.cn/s/d36eb5eadc4c">https://pan.quark.cn/s/d36eb5eadc4c</a> 提取码：Ze6B</li></ul><hr><h2 id="第二部分：配置信息"><a href="#第二部分：配置信息" class="headerlink" title="第二部分：配置信息"></a>第二部分：配置信息</h2><p>本地生成的博客需要上传到服务器托管，然后才能通过网址进行访问。因此我们需要注册一个Github账户，在Github上创建仓库，将本地文件托管到这个远程仓库中，然后github会自动生成一个静态网页——github pages，我们可以通过这个网页访问到我们博客。</p><p>1.注册Github账户，创建仓库；</p><p>2.绑定Github；</p><p>3.部署博客到Github上。</p><h4 id="1-注册Github账户，创建仓库"><a href="#1-注册Github账户，创建仓库" class="headerlink" title="1.注册Github账户，创建仓库"></a>1.注册Github账户，创建仓库</h4><p><strong>第一步：</strong>注册Github账户</p><ul><li>Github官方网址：<a href="https://github.com/">https://github.com/</a></li></ul><p><img src="/images/github1.png"></p><p><img src="/images/github2.png"></p><p><strong>第二步：</strong>创建个人仓库， 新用户注册完成后会自动跳转到创建页面。</p><p><img src="/images/github3.png"></p><blockquote><p><strong>仓库的取名格式：用户名.github.io(这个就是你以后博客的网址)</strong></p></blockquote><p><img src="/images/github4.png"></p><p>点击create repository,完成仓库创建。</p><h4 id="2-绑定Github"><a href="#2-绑定Github" class="headerlink" title="2.绑定Github"></a>2.绑定Github</h4><p><strong>第一步：</strong>回到你的git bash中，将本地与Github绑定一起，请输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;liubei&quot; //你的github用户名</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;xxx@xxx.com&quot; //填写你的github注册邮箱</span><br></pre></td></tr></table></figure><p>这里的name和email就是你注册Github的用户名和邮箱。</p><p><strong>第二步：</strong>继续输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh</span><br></pre></td></tr></table></figure><p>查看本机是否安装SSH。如果提示：No such file or directory，说明你是第一次使用git。</p><p>SSH（安全外壳协议，Secure Shell 的缩写）是建立在应用层基础上的安全协议。简单说，SSH就是保障你的账户安全，将你的数据加密压缩，不仅防止其他人截获你的数据，还能加快传输速度。</p><p><strong>为什么要配置这个呢？</strong></p><p>因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码不太安全，所以我们使用ssh key来解决本地与服务器的连接问题。</p><p><strong>第三步：</strong>配置ssh，继续输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的github邮箱地址&quot;</span><br></pre></td></tr></table></figure><p>然后连续回车，一般3-4次。命令执行完成后，会在用户目录下生成一个文件（大致路劲：C盘—用户—Admin—.ssh文件夹），找到其中的【id_rsa.pub】，打开然后复制。</p><p><img src="/images/github6.png"></p><blockquote><p>简单讲，ssh就是一个秘钥，其中【id-rsa】是你这台电脑的私人秘钥，不能给别人看，【id-rsa.pub】是公共秘钥，可以给别人看。把这个公钥放在Github上，这样当你链接Github自己的账户时，它就会根据公钥匹配你的私钥，当相互匹配时，才能够顺利地通过git上传你的文件到Github上。</p></blockquote><p><img src="/images/github7.png"></p><p>接着在你的Github右上角找到setting，点进去找到SSH key的设置选项，点击New SSH key，把你刚才从【id_rsa.pub】中复制的信息粘贴进去，最后点击Add SSH key就可以了。</p><p><img src="/images/github8.png"></p><p><img src="/images/github9.png"></p><p>回到git bash验证是否成功，请输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><img src="/images/github10.png"></p><p>第一次会出现这种情况，输入：yes，就行了。出现下图表示安装成功。</p><p><img src="/images/github11.png"></p><h4 id="3-部署博客到Github上"><a href="#3-部署博客到Github上" class="headerlink" title="3.部署博客到Github上"></a>3.部署博客到Github上</h4><p><strong>第一步：</strong>这个时候我们需要先安装deploy-git，也就是部署命令。在git bash中输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><strong>第二步：</strong>将hexo和Github关联起来，也就是将hexo生成的文章部署到Github上。在你的blog目录下找到【_config.yml】文件，打开并找到<strong>deploy</strong>进行修改。</p><p><img src="/images/github12.png"></p><p><img src="/images/github13.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: git@github.com:username/username.github.io.git</span><br><span class="line">branch: main</span><br></pre></td></tr></table></figure><p>repo中的内容即为github个人主页链接地址，不知道的可以打开仓库查看。</p><p><img src="/images/github14.png"></p><p><strong>第三步：</strong>部署文章，上线博客，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  #清除之前生成的东西</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g    #生成静态文章</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d   #部署博客</span><br></pre></td></tr></table></figure><p>注意：第一次可能会弹出要你输入Github的username和password。完成后，你可以查看Github仓库，会发现多了很多文件，一般这就代表博客搭建成功，你可以用<a href="https://username.github.io登陆查看你的博客了./">https://username.github.io登陆查看你的博客了。</a></p><p><img src="/images/github15.png"></p><p>如果你的要求不高，其实就可以开始写博客了，直接在git bash 中输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;myimagesblog&quot;</span><br></pre></td></tr></table></figure><p>会在【source\ _post】文件夹中生成myimagesblog.md文件，你可以在这个文件中书写自己的博客，完成后上传文章就行。</p><hr><p><img src="/images/github16.png"></p><blockquote><p><strong>博客文件夹介绍</strong></p><ul><li>_config.yml:俗称站点配置文件，很多与博客网站的格式、内容相关的设置都需要在里面修改。</li><li>node_modules:存储Hexo插件的文件，可以实现各种扩展功能。</li><li>package.json:我也不知道是干啥的。</li><li>scaffolds:模板文件夹，里面的post.md文件可以设置每一篇博客的模板。</li><li>source:非常重要，所有的个人文件都在里面。</li><li>themes：主题文件夹，可以从Hexo官网下载。</li></ul></blockquote><hr><h2 id="第三部分：优化博客"><a href="#第三部分：优化博客" class="headerlink" title="第三部分：优化博客"></a>第三部分：优化博客</h2><p>优化博客就是让自己博客更加美观，更加个性化，这里我们需要下载相应主题配置博客。</p><h4 id="1-下载主题"><a href="#1-下载主题" class="headerlink" title="1.下载主题"></a>1.下载主题</h4><p>主题可以从hexo官网上下载，比较流行的主题是Next，Butterfly。个人配置的是Butterfly。</p><p><img src="/images/tm1.png"></p><p>找到自己中意的主题，点进去，一般会跳转到github上，往下拉找到下载链接，复制下载，然后通过git下载。<br><img src="/images/tm2.png"></p><p>直接输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>然后打开根目录下的【config.yml】文件，找到theme，修改为butterfly.</p><p><img src="/images/tm3.png"></p><p>这样整个主题就配置成功，可以查看一下，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><hr><h4 id="2-个性化设置"><a href="#2-个性化设置" class="headerlink" title="2.个性化设置"></a>2.个性化设置</h4><p><strong>修改语言：</strong>在根目录下找到【_config.yml】文件，找到language。</p><p><img src="/images/tm4.png"></p><p><strong>修改导航栏：</strong>在主题配置文件中找到nav，把menu前面的‘#’去掉就行，将英文替换成中文。</p><p><img src="/images/tm5.png" alt="tm5"></p><p><strong>修改头像：</strong>在主题配置文件中找到avatar.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">avatar:</span><br><span class="line">img: /img/avatar.png #将自己想要的图片保存在【theme/butterfly/source/img】中</span><br><span class="line">effect: true # 头像一直转</span><br></pre></td></tr></table></figure><p><strong>修改顶部图：</strong>找到index_img,同样是插入自己图片的路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index_img: /img/XXX.png  #xxx是图片名称</span><br></pre></td></tr></table></figure><p><strong>修改网站背景：</strong>在主题配置文件中找到background，同样是插入图片地址，或者颜色。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background: url(/img/xx.png)  #img是保存图片的文件夹，xx是图片名 </span><br></pre></td></tr></table></figure><p><strong>添加本地搜索：</strong>先安装插件，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo-generator-search</span><br></pre></td></tr></table></figure><p>然后修改主题配置文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: false # true 是开启本地搜索；false 是关闭</span><br><span class="line">  # Preload the search data when the page loads.</span><br><span class="line">  preload: false</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # Unescape html strings to the readable one.</span><br><span class="line">  unescape: false</span><br><span class="line">  CDN:</span><br></pre></td></tr></table></figure><p> <strong>添加字数统计：</strong></p><p>打开hexo工作目录，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>然后修改主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wordcount:</span><br><span class="line">  enable: true  #改成true</span><br><span class="line">  post_wordcount: true</span><br><span class="line">  min2read: true</span><br><span class="line">  total_wordcount: true</span><br></pre></td></tr></table></figure><p><strong>侧边栏设置：</strong></p><p>在主题配置文件中找到aside，根据自己需要配置</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
